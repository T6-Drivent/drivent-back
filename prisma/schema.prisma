// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  email        String         @unique @db.VarChar(255)
  password     String         @db.VarChar(255)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Session      Session[]
  Enrollment   Enrollment[]
  Registration Registration[]

  @@map("users")
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  User      User     @relation(fields: [userId], references: [id])
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model Event {
  id                 Int            @id @default(autoincrement())
  title              String         @db.VarChar(255)
  backgroundImageUrl String         @db.VarChar(255)
  logoImageUrl       String         @db.VarChar(255)
  startsAt           DateTime
  endsAt             DateTime
  priceId            Int            @unique
  price              Price          @relation(fields: [priceId], references: [id])
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  Registration       Registration[]

  @@map("events")
}

model Enrollment {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(255)
  cpf       String    @db.VarChar(255)
  birthday  DateTime
  phone     String    @db.VarChar(255)
  userId    Int       @unique
  User      User      @relation(fields: [userId], references: [id])
  Address   Address[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("enrollments")
}

model Address {
  id            Int        @id @default(autoincrement())
  cep           String     @db.VarChar(255)
  street        String     @db.VarChar(255)
  city          String     @db.VarChar(255)
  state         String     @db.VarChar(255)
  number        String     @db.VarChar(255)
  neighborhood  String     @db.VarChar(255)
  addressDetail String?    @db.VarChar(255)
  enrollmentId  Int        @unique
  Enrollment    Enrollment @relation(fields: [enrollmentId], references: [id])
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@map("addresses")
}

model Price {
  id           Int      @id @default(autoincrement())
  Event        Event[]
  online       Int
  inPerson     Int
  withHotel    Int
  withoutHotel Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("prices")
}

enum RegistrationType {
  inPersonWithHotel
  inPersonWithoutHotel
  online
}

model Registration {
  id        Int              @id @default(autoincrement())
  user      User             @relation(fields: [userId], references: [id])
  userId    Int              @unique
  event     Event            @relation(fields: [eventId], references: [id])
  eventId   Int
  type      RegistrationType
  charge    Int
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@map("registrations")
}

model Hotel {
  id        Int      @id @default(autoincrement())
  name      String
  image     String
  Room      Room[]
  createdAt DateTime @default(now())

  @@map("hotels")
}

// enum RoomSize {
//   Single
//   Double
//   Triple
// }

model Room {
  id               Int                @id @default(autoincrement())
  number           Int
  hotel            Hotel              @relation(fields: [hotelId], references: [id])
  hotelId          Int
  RoomAvailability RoomAvailability[]
  size             String
  createdAt        DateTime           @default(now())

  @@unique([hotelId, number])
  @@map("rooms")
}

model RoomAvailability {
  id        Int      @id @default(autoincrement())
  room      Room     @relation(fields: [roomId], references: [id])
  roomId    Int
  status    Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("rooms_availability")
}
